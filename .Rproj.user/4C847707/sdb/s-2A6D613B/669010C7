{
    "contents" : "# CREATE EDGELIST FROM DATABASE\n\nmakeEdges <- function(DATA){\n  #THE FIRST NAME IN ALL LISTS MUST BE THE ENTRY\n  total <- length(DATA)\n  count <- 1\n  EDGE1 <- vector(1e5,mode=\"character\")\n  EDGE2 <- vector(1e5,mode=\"character\")\n  \n  sumcheck <- 0\n  for (i in 1:total) {\n    check <- F\n    label <- names(DATA)[i]\n    \n    lnames <- length(names(DATA[[1]]))\n    allnames <- names(DATA[[1]])\n    \n    for (j in 2:lnames) {\n      lcat <- length(DATA[[i]][[j]])\n      if (lcat > 0){\n        check <- T\n        for (k in 1:lcat) {    \n          EDGE1[count] <- label\n          EDGE2[count] <- DATA[[i]][[j]][k]\n          count <- count+1\n        }\n      }\n    }\n    if (!check) {\n      sumcheck <- sumcheck + 1\n    }\n  }\n  cat(sumcheck,\"(\", round(100*sumcheck/total),\"%) elements have no edges\\n\")\n  return(list(\"E1\"=EDGE1[1:(count-1)], \"E2\"=EDGE2[1:(count-1)]))\n}\n\n\nl1 <- makeEdges(EC)\nl2 <- makeEdges(EE)\nl3 <- makeEdges(ER)\nl4 <- makeEdges(EM)\nl5 <- makeEdges(EP)\n\nE1 <- c(l1$E1,l2$E1,l3$E1,l4$E1,l5$E1)\nE2 <- c(l1$E2,l2$E2,l3$E2,l4$E2,l5$E2)\n\nE1 <- c(l1$E1,l2$E1,l3$E1,l4$E1,l5$E1,as.character(MASS))\nE2 <- c(l1$E2,l2$E2,l3$E2,l4$E2,l5$E2,names(MASS))\n\nlibrary(igraph)\nG <- graph.edgelist(cbind(E1,E2),directed=F)\nG <- simplify(G)\nsummary(G)\nsave(G, file=\"G.RData\")\n\n# Attributes in the graph\nlist.vertex.attributes(G3)\nget.vertex.attributes(G3,'name',1)\nV(G3)[1]\nE(G3)[1]\n\n# Clustering coefficient\ntransitivity(G3)\n\n# Connected?\nis.connected(G3)\n\n# Diameter (=34)\ndiameter(G3,directed=F)\n\n# Clustering\nclusters(G3)\n\n# Setting communities manually\ntotal <- length(V(G3))\nCOM <- vector(\"double\",total)\nfor (i in 1:total) {\n  temp <- substr(V(G3)[i]$name,1,1)\n  if (temp == \"C\") COM[i] <- 5\n  else if (temp == \"E\") COM[i] <- 4\n  else if (temp == \"R\") COM[i] <- 3\n  else if (temp == \"M\") COM[i] <- 2\n  else if (temp == \"P\") COM[i] <- 1\n  else COM[i] <- 6\n}\n\nsave(COM, file=\"COM.RData\")\n\n# Sort vertices by COMmunity\ntemp <- order(COM)\ntemp2 <- vector(\"double\",length(COM))\nfor (i in 1:length(COM)) {\n  temp2[temp[i]] <- i\n}\nG <- permute.vertices(G,temp2)\nrm(temp,temp2)\nsave(G, file=\"G.RData\")\n\n# Still have to take a deeper look at it, but it seems meaningless\nGcloseness <- closeness(G)\nsave(Gcloseness,file=\"Gcloseness.RData\")\n\n# Path length (curious)\nGpathlengthhist<-path.length.hist(G)\nsave(Gpathlengthhist,file=\"Gpathlengthhist.RData\")\nbarplot(Gpathlengthhist$res)\n\n# Got a lil stuck here\nnp = 280 #number of pathways\nGshortestpaths <- shortest.paths(G,to=V(G)[1:np])\nGshort <- Gshortestpaths[30149:38648,]\nsave(Gshort,file=\"Gshort.RData\")\ndim(Gshort)\nimage(cbind(c(0,-2),c(3,4)),col=heat.colors(1000,alpha=1))\nimage(-Gshort)\n\nfor (i in 1:dim(Gshort)[1]) {\n  for (j in 1:dim(Gshort)[2]) {\n    if (identical(Gshort[i,j],-Inf)) Gshort[i,j] <- 10\n    #if (is.na(Gshort[i,j])) Gshort[i,j] <- -Inf\n  }\n}\n\n\nlibrary(gplots)\na<-heatmap.2(Gshort,trace=\"none\",dendrogram=\"none\")\n\na<-heatmap.2(Gshort[!rowSums(Gshort==10)==dim(Gshort)[2],],trace=\"none\",dendrogram=\"none\",scale=\"none\",col=heat.colors(30))\n\n\nheatmap(Gshort)",
    "created" : 1431521928184.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "643659029",
    "id" : "669010C7",
    "lastKnownWriteTime" : 1397581265,
    "path" : "~/Rstuffbro/Backup/Rstuffbrobackup/2_KEGG/kUtils/keggGraph.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}