{
    "contents" : "setMethod(\"summary\", signature = \"FELLA.USER\", function(object) {\n  breakline <- \"\\n---------------------------------------------------\\n\"\n  dic <- object@dictionary\n  output <- list()\n  \n  if (is.na(object@hypergeom@valid)) output$hypergeom <- \"Not performed\"\n  else if (!object@hypergeom@valid) output$hypergeom <- \"Failed\"\n  else {\n    p.values <- sort(object@hypergeom@pvalues)[1:30]\n    \n    output$hypergeom <- data.frame(dic[names(p.values)], signif(p.values, digits = 4))\n    names(output$hypergeom) <- c(\"Description\", \"p.value\")\n  }\n  \n  if (is.na(object@diffusion@valid)) output$diffusion <- \"Not performed\"\n  else if (!object@diffusion@valid) output$diffusion <- \"Failed\"\n  else {\n    \n    dif.select <- which(object@diffusion@pvalues < 0.05)\n    \n    out.pvalues <- signif(object@diffusion@pvalues[dif.select], digits = 3)\n    smallest <- which(out.pvalues < 2e-16)\n    out.pvalues <- format(out.pvalues)\n    out.pvalues[smallest] <- \"<2e-16\"\n    \n    out.names <- names(out.pvalues)\n    out.description <- dic[out.names]\n    out.highlight <- out.names %in% object@diffusion@highlight\n    \n    out.order <- order(out.names)\n    \n    output$diffusion <- data.frame(out.names, out.pvalues, out.description, out.highlight, \n                                   row.names = NULL)[out.order, ]\n    row.names(output$diffusion) <- NULL\n    names(output$diffusion) <- c(\"KEGG id\", \"p.value\", \"Description\", \"Guess?\")\n  }\n  \n  if (is.na(object@pagerank@valid)) output$pagerank <- \"Not performed\"\n  else if (!object@pagerank@valid) output$pagerank <- \"Failed\"\n  else {\n    dif.select <- which(object@pagerank@pvalues < 0.05)\n    \n    out.pvalues <- signif(object@pagerank@pvalues[dif.select], digits = 3)\n    smallest <- which(out.pvalues < 2e-16)\n    out.pvalues <- format(out.pvalues)\n    out.pvalues[smallest] <- \"<2e-16\"\n    \n    out.names <- names(out.pvalues)\n    out.description <- dic[out.names]\n    out.highlight <- out.names %in% object@diffusion@highlight\n    \n    output$pagerank <- data.frame(out.names, out.pvalues, out.description, out.highlight, \n                                   row.names = NULL)\n    row.names(output$pagerank) <- NULL\n    names(output$pagerank) <- c(\"KEGG id\", \"p.value\", \"Description\", \"Guess?\")\n\n  }\n  \n  return(output)\n})\n\nsetMethod(\"show\", signature = \"FELLA.DATA\", function(object) {\n  breakline <- \"\\n---------------------------------------------------\\n\"\n  \n  cat(\"General data:\\n\")\n  if (vcount(object@keggdata@graph) == 0) {\n    cat(\"·KEGG graph not loaded.\\n\")\n  } else {\n    cat(\"·KEGG graph is ready.\\n\")\n  }\n  if (length(object@keggdata@id2name) == 0) {\n    cat(\"·KEGG names not loaded.\")\n  } else {\n    cat(\"·KEGG names are ready.\")\n  }\n  \n  cat(breakline)\n  \n  cat(\"Hypergeometric test:\\n\")\n  if (prod(dim(object@hypergeom@matrix)) == 1) {\n    cat(\"·Matrix not loaded.\")\n  } else {\n    cat(\"·Matrix is ready.\")\n  }\n  \n  cat(breakline)\n  \n  cat(\"Heat diffusion:\\n\")\n  if (prod(dim(object@diffusion@matrix)) == 1) {\n    cat(\"·Matrix not loaded.\\n\")\n  } else {\n    cat(\"·Matrix is ready.\\n\")\n  }\n  if (length(object@diffusion@rowSums) == 0 || \n        length(object@diffusion@squaredRowSums) == 0) {\n    cat(\"·RowSums not loaded.\")\n  } else {\n    cat(\"·RowSums are ready.\")\n  }\n  \n  cat(breakline)\n  \n  cat(\"PageRank:\\n\")\n  if (prod(dim(object@pagerank@matrix)) == 1) {\n    cat(\"·Matrix not loaded.\\n\")\n  } else {\n    cat(\"·Matrix is ready.\\n\")\n  }\n  if (length(object@pagerank@rowSums) == 0 || \n        length(object@pagerank@squaredRowSums) == 0) {\n    cat(\"·RowSums not loaded.\\n\")\n  } else {\n    cat(\"·RowSums are ready.\\n\")\n  }\n  \n})\n\n\nsetMethod(\"show\", signature = \"FELLA.USER\", function(object) {\n  breakline <- function() {\n    cat(fill = T)\n    cat(\"---------------------------------------------------\", fill = T)\n  }\n  \n  cat(\"Compounds in the input: \")\n  if (length(getInput(object)) == 0) {\n    cat(\"empty\", fill = T)\n  } else {\n    cat(length(getInput(object)), fill = T)\n    print(getInput(object))\n  }\n  if (length(getBackground(object)) == 0) {\n    cat(\"Background compounds: all available compounds (default)\")\n  } else {\n    cat(\"Background compounds:\", length(getBackground(object)))\n  }\n  \n  breakline()\n  \n  cat(\"Hypergeometric test: \")\n  if (is.na(getValid(object, \"hypergeom\"))) cat(\"not performed\")\n  else if (!getValid(object, \"hypergeom\")) cat(\"error during execution\")\n  else {\n    cat(\"ready.\", fill = T)\n    cat(\"Top 15 p-values:\", fill = T)\n    print(sort(getPvalues(object, \"hypergeom\"))[1:15])\n  }\n  \n  breakline()\n  \n  cat(\"Heat diffusion: \")\n  if (is.na(getValid(object, \"diffusion\"))) cat(\"not performed\")\n  else if (!getValid(object, \"diffusion\")) cat(\"error during execution\")\n  else {\n    cat(\"ready.\", fill = T)\n    cat(\"Significant nodes (0.05): \", sum(getPvalues(object, \"diffusion\") < 0.05))\n  }\n  \n  breakline()\n  \n  cat(\"PageRank: \")\n  if (is.na(getValid(object, \"pagerank\"))) cat(\"not performed\")\n  else if (!getValid(object, \"pagerank\")) cat(\"error during execution\")\n  else {\n    cat(\"ready.\", fill = T)\n    cat(\"Significant nodes (0.05): \", sum(getPvalues(object, \"pagerank\") < 0.05))\n  }\n  \n})\n\nsetMethod(\"plot\", \n          signature(x = \"FELLA.USER\"), \n          function(x = 1, \n                   method = \"hypergeom\", \n                   main = \"Affected subgraph\", \n                   threshold = 0.005, \n                   plimit = 15, \n                   nlimit = 250, \n                   layout = F, \n                   filename = NULL, \n                   splitByConnectedComponent = F, \n                   askPlots = T,  \n                   thresholdConnectedComponent = 0.05, \n                   GO.CellularComponent = NULL, \n                   GONamesAsLabels = T, \n                   LabelLengthAtPlot = 22, \n                   data = NULL, \n                   ...) {\n\n  checkArgs <- checkArguments(method = method, \n                              threshold = threshold, \n                              plimit = plimit, \n                              nlimit = nlimit, \n                              layout = layout, \n                              splitByConnectedComponent = splitByConnectedComponent, \n                              askPlots = askPlots, \n                              thresholdConnectedComponent = thresholdConnectedComponent, \n                              GO.CellularComponent = GO.CellularComponent, \n                              GONamesAsLabels = GONamesAsLabels, \n                              LabelLengthAtPlot = LabelLengthAtPlot, \n                              object = x, \n                              data = data)\n  if (!checkArgs$valid)\n    stop(\"Bad argument when calling function 'FELLA::plot'.\")\n            \n  if (data@keggdata@status != \"loaded\"){\n    stop(\"'data' points to an empty FELLA.DATA object\")\n  }\n  \n  if (method == \"hypergeom\") {\n    if (is.na(x@hypergeom@valid) || !x@hypergeom@valid) {\n      stop(\"Hypergeometric test is not ready yet.\")\n    } \n      \n\n    graph.bipartite <- generateResultsGraph(method = method, \n                                          threshold = threshold, \n                                          plimit = plimit,\n                                          object = x, \n                                          data = data)\n\n    if (!is.null(filename)) png(filename = filename, height = 1000, width = 800)\n\n\n    ans.return <- plotBipartite(graph = graph.bipartite, \n                                layout = layout, \n                                main = \"Hypergeometric test results\", \n                                ...)\n\n    if (!is.null(filename)) dev.off()\n\n    return(invisible(ans.return))\n    \n  } else if (method == \"diffusion\" || method == \"pagerank\") {\n    valid <- slot(x, method)@valid\n    if (is.na(valid) || !valid) {\n      stop(paste0(\"Results from \", method, \" are not ready yet.\"))\n    } \n\n    # That may be a list or a unique graph\n    if (!splitByConnectedComponent) {\n      graph <- generateResultsGraph(method = method, \n                                    threshold = threshold, \n                                    nlimit = nlimit,\n                                    splitByConnectedComponent = F, \n                                    GO.CellularComponent = GO.CellularComponent, \n                                    GONamesAsLabels = GONamesAsLabels, \n                                    LabelLengthAtPlot = LabelLengthAtPlot, \n                                    object = x, \n                                    data = data)\n      \n      if (!is.null(filename)) png(filename = filename, height = 1400, width = 1500)\n      ans.return <- plotGraph(graph = graph, \n                    input = getInput(x), \n                    layout = layout, \n                    main = main, \n                    ...)\n      if (!is.null(filename)) dev.off()\n      return(invisible(ans.return))\n    } else {\n      graph.list <- generateResultsGraph(method = method, \n                                         threshold = threshold, \n                                         nlimit = nlimit,\n                                         splitByConnectedComponent = T, \n                                         GO.CellularComponent = GO.CellularComponent, \n                                         GONamesAsLabels = GONamesAsLabels, \n                                         LabelLengthAtPlot = LabelLengthAtPlot, \n                                         object = x, \n                                         data = data)\n      \n      if (is.null(filename) & askPlots) {\n        parOld <- par(mar = c(0, 0, 0, 0))\n        par(ask = T)\n      } \n      ans <- lapply(1:length(graph.list), function(graph.id) {\n        graph <- graph.list[[graph.id]]\n        \n        if (!is.null(filename)) png(filename = paste0(substr(filename, 1, nchar(filename) - 4), \n                                                      \"_\", \n                                                      graph.id, \n                                                      \".png\"), height = 1400, width = 1500)\n        \n        ans.layout <- plotGraph(graph = graph, \n                                input = getInput(x), \n                                layout = layout, \n                                main = main, \n                                ...)\n        mtext(paste0(\"p-value from permutation by component size (\", \n                      vcount(graph), \n                      \" nodes): \" , names(graph.list)[graph.id]))\n        \n        if (!is.null(filename)) dev.off()\n        ans.layout\n      })\n      if (is.null(filename) & askPlots) par(parOld)\n      names(ans) <- names(graph.list)\n      \n      if (layout) return(invisible(ans))\n      return(invisible())\n    }\n  }\n  \n  stop(\"The 'method' argument must be 'hypergeom', 'diffusion' or 'pagerank'.\")\n  return(invisible())\n})\n\n\n  ",
    "created" : 1431078131680.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2185677447",
    "id" : "F7A76636",
    "lastKnownWriteTime" : 1436110569,
    "path" : "~/Rstuffbro/FELLA/R/AllMethods.R",
    "project_path" : "R/AllMethods.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}