{
    "contents" : "# server.R\n\nshinyServer(function(input, output, session) {\n  \n  # First step: create the USER variable\n  createUser <- reactive({\n#     browser()\n    if (input$radioInput == 1) {\n      read.comp <- c(\"C00986\", \n                     \"C01043\", \n                     \"C00064\")\n    } else if (input$radioInput == 2) {\n      read.comp <- c(\"C00986\", \n                     \"C01043\", \n                     \"C00064\", \n                     \"C00014\", \n                     \"C00288\", \n                     \"C06058\")\n    } else if (input$radioInput == 3) {\n      read.comp <- read.table(\"examples/compoundsMetaboanalyst.csv\", \n                              header = T, \n                              stringsAsFactors = F)\n      read.comp <- read.comp$Compounds\n    } else {\n      if (!is.null(input$file)) {\n#         browser()\n        read.file <- read.table(input$file$datapath, header = T, stringsAsFactors = F)\n        read.comp <- as.character(read.file$Compounds)\n        read.comp <- read.comp[!is.na(read.comp)]\n        if (is.null(read.comp)) {\n          return(NULL)\n        }\n      }\n      else {\n        message(\"No compounds uploaded yet.\")\n        return(NULL)\n      }\n    }\n#     browser()\n    result <- enrich(compounds = read.comp, \n                     method = input$method, \n                     approx =input$approx, \n                     niter = input$niter, \n                     data = FELLA.DATA)\n        \n# browser()\n    return(result)\n  })\n  \n\n\n  # Second: the summary of the compounds in the input\n  inputSummary <- reactive({\n    if (!is.null(createUser())) {\n      input <- getInput(createUser())\n      inputNames <- getName(FELLA.DATA, input)\n#       browser()\n      inputNames <- sapply(inputNames, function(x) {\n        if (length(x)) {\n#           browser()\n          return(x[[1]])}\n        return(NULL)\n      }) \n      excluded <- getExcluded(createUser())\n      \n      return(list(\"input\" = input, \n                  \"inputNames\" = inputNames, \n                  \"excluded\" = excluded))\n    }\n  })\n\n  # Downloadable file \n  output$downloadExample <- downloadHandler(\n    filename = function() {\n      \"exampleInput.csv\"\n    }, \n    content = function(file) {\n      con <- readLines(\"examples/exampleInput.csv\")\n      write(con, file)\n    }, \n    contentType = \"text/csv\"\n  )\n\n  # Table showing current compounds\n  output$tableCompounds <- renderTable({\n    if (!is.null(inputSummary())) {\n      outTable <- cbind(inputSummary()$inputNames)\n      colnames(outTable) <- \"KEGG name\"\n      return(outTable)\n    }\n  })\n\n  # Table showing excluded compounds\n  output$tableExcluded <- renderTable({\n#     browser()\n    if (!is.null(inputSummary())) {\n      if (length(inputSummary()$excluded) > 0) {\n        outTable <- data.frame(inputSummary()$excluded)\n        names(outTable) <- \"KEGG id\"\n        return(outTable)\n      }\n    }\n  })\n\n  # Generate the graph / graphlist...\n  # BUT the current graph is extracted using another function\n  # That's because the current graph can vary with the user-selected CC\n  generateGraph <- reactive({\n    if (!is.null(createUser())) {\n#             browser()\n      return(generateResultsGraph(object = createUser(),\n                  method = input$method, \n                  threshold = input$threshold, \n                  plimit = 15, \n                  nlimit = input$nlimit, \n                  splitByConnectedComponent = as.logical(input$splitByConnectedComponent), \n                  thresholdConnectedComponent = input$thresholdConnectedComponent, \n                  GO.CellularComponent = input$GO.CellularComponent, \n                  GONamesAsLabels = as.logical(input$GONamesAsLabels), \n                  LabelLengthAtPlot = input$LabelLengthAtPlot, \n                  data = FELLA.DATA))\n    }\n    else return(NULL)\n  })\n  \n  # This function tracks the number of CCs and lets the user choose with an input text\n  #  inputText 'updateSelectInput' changes as the size of the graph list does.\n  observe({\n    if (input$method == \"hypergeom\") {\n        # Hypergeometric test has been chosen\n        updateSelectInput(session = session, \n                          inputId = \"selectGraphCC\", \n                          choices = list(\"Whole graph (hypergeometric test)\" =  1), \n                          selected = 1)\n    } else {\n      if (as.logical(input$splitByConnectedComponent)) {\n        #  If the result is split by cc... make a new selectInput! With all the cc's.\n        sizes <- sapply(generateGraph(), vcount)\n        pvalues <- names(generateGraph())\n        outputNames <- paste0(sizes, \" nodes (p = \", pvalues, \")\")\n        outputChoice <- as.list(1:length(outputNames))\n        names(outputChoice) <- outputNames\n        #       browser()\n        updateSelectInput(session = session, \n                          inputId = \"selectGraphCC\", \n                          choices = outputChoice, \n                          selected = 1)\n      } else {\n        # If it is not split.. there is only one cc...\n        updateSelectInput(session = session, \n                          inputId = \"selectGraphCC\", \n                          choices = list(\"Whole graph (not split by CC)\" =  1), \n                          selected = 1)\n      }\n    }\n  })\n\n  # This function returns the currently chosen graph\n  currentGraph <- reactive({\n    if (!is.null(createUser())) {\n      if (input$method == \"hypergeom\") {\n        return(generateGraph())\n      } else {\n#         browser()\n        if (!as.logical(input$splitByConnectedComponent)) {\n          return(generateGraph())\n        } else {\n          return(generateGraph()[[as.numeric(input$selectGraphCC)]])\n        }\n      }\n    }\n    return(NULL)\n  })\n\n  # Tooltip about the current graph size\n  output$graphSize <- renderText({\n    if (!is.null(createUser())) {\n      if (!is.null(currentGraph()))  {\n#         browser()\n        return(paste0(\"Number of nodes: \", \n                      vcount(currentGraph())))\n      } else {\n        return(\"Graph is NULL! No significant pathways have been found.\")\n      }\n    }\n  })\n# ---------------------------------------------------\n\n#   plotSolution <- reactive({\n#     if (!is.null(createUser())) {\n# #       browser()\n#       return(plot(x = createUser(),\n#                   method = input$method, \n#                   main = \"Affected subgraph\", \n#                   threshold = input$threshold, \n#                   plimit = 15, \n#                   nlimit = input$nlimit, \n#                   layout = T, \n#                   filename = NULL, \n#                   splitByConnectedComponent = as.logical(input$splitByConnectedComponent), \n#                   askPlots = F, \n#                   thresholdConnectedComponent = input$thresholdConnectedComponent, \n#                   GO.CellularComponent = input$GO.CellularComponent, \n#                   GONamesAsLabels = as.logical(input$GONamesAsLabels), \n#                   LabelLengthAtPlot = input$LabelLengthAtPlot, \n#                   data = FELLA.DATA))\n#     }\n#     else return(NULL)\n#   })\n\n  # Plot the CURRENT graph! \n  # Reactive function\n  plotSolution <- reactive({\n    if (!is.null(generateGraph())) {\n#             browser()\n      if (input$method == \"hypergeom\") {\n        if (is.null(generateGraph()))  {\n          return(NULL)\n        } else {\n          return(plotBipartite(graph = currentGraph(), \n                               layout = T))\n        }\n      } else {\n        return(plotGraph(graph = currentGraph(), \n                         input = getInput(createUser()), \n                         layout = T, \n                         NamesAsLabels = T))\n      }\n    }\n    else return(NULL)\n  })\n\n  # Plot the CURRENT graph! \n  # outputPlot\n  output$plotSolution <- renderPlot({\n    plotSolution()\n  })\n\n  # Table of results\n  output$tableSolution <- renderTable({\n    wholeTable <- generateResultsTable(object = createUser(), \n                                       method = input$method, \n                                       threshold = input$threshold,\n                                       plimit = 15, \n                                       nlimit = input$nlimit, \n                                       LabelLengthAtPlot = 100, \n                                       data = FELLA.DATA)\n#     browser()\n    plottedRows <- wholeTable$\"KEGG id\" %in% V(currentGraph())$name\n    outTable <- wholeTable[plottedRows, ]\nrownames(outTable) <- 1:dim(outTable)[1]\n# browser()\n    return(outTable)\n  })\n  \n# ---------------------------------------------------\n#  CC example: change default value for the updateTextInput!\n  observe({\n    if (input$exampleGOCC > 0)\n      updateTextInput(session, \"GO.CellularComponent\", value = \"GO:0005739\")\n  })\n    \n\n  # Click action\n  observe({\n#       browser()\n    if (!is.null(input$clickSolution)) {\n      nodes.coord <- plotSolution()\n      diff.coord <- sweep(nodes.coord[, 1:2], \n                          2, \n                          c(input$clickSolution$x, \n                            input$clickSolution$y), \n                          \"-\")\n      node.min <- which.min(apply(diff.coord, 1, function(x) x %*% x))\n      if ((diff.coord[node.min, 1]^2 + diff.coord[node.min, 2]^2) < 5e-4) {\n        link <- paste0(\"http://www.genome.jp/dbget-bin/www_bget?\", nodes.coord[node.min, 3])\n        browseURL(link)\n      } \n    }\n  })\n\n# Hover action\n  output$hoverNode <- renderText({\n#           browser()\n    if (!is.null(input$hoverSolution)) {\n      nodes.coord <- plotSolution()\n      diff.coord <- sweep(nodes.coord[, 1:2], \n                          2, \n                          c(input$hoverSolution$x, \n                            input$hoverSolution$y), \n                          \"-\")\n      node.min <- which.min(apply(diff.coord, 1, function(x) x %*% x))\n      if ((diff.coord[node.min, 1]^2 + diff.coord[node.min, 2]^2) < 5e-4) {\n        return(nodes.coord[, 4][node.min])\n      } \n      return(\"No nodes hovered\")\n    }\n    return(\"No nodes hovered\")\n  })\n# ---------------------------------------------------\n# \n\n  # SAVE YOUR RESULTS\n  output$saveText <- reactive({\n    if (input$saveButton) {\n      directory <- paste0(getwd(), \"/\", input$saveName)\n      \n      dir.create(directory)\n      \n      pdf(paste0(directory, \"/\", \"test.pdf\"), width = 16, height = 16)\n      plotPagerank()\n      dev.off()\n      \n      if (!is.null(createUser())) write.csv(createUser()@pagerank@pvalues,\n                                            file = paste0(directory, \"/table.csv\"))\n      \n      return(paste0(\"Results saved in directory \", directory))\n      \n    }\n#       return(getwd())\n    return(\"Introduce the directory to save your outputs\")\n  })\n\n###########################################################\n# Cytoscape plugin!\nnetwork <- reactive({\n  if (!is.null(createUser())) {\n    \n    g <- currentGraph()\n    id <- V(g)$name\n    name <- V(g)$LABEL\n    nodeData <- data.frame(id, name, stringsAsFactors=FALSE)\n    \n    \n    solidColor <- character(vcount(g))\n    nodeWidth <- character(vcount(g))\n    nodeShape <- character(vcount(g))\n    \n    for (id in 1:vcount(g)) {\n      solidColor[id] <- switch(V(g)$com[id], \n                               \"1\" = \"#CD0000\",\n                               \"2\" = \"#CD96CD\",\n                               \"3\" = \"#FFD500\",\n                               \"4\" = \"#8DB6CD\",\n                               \"5\" = \"#548B54\"\n      )\n      nodeWidth[id] <- switch(V(g)$com[id], \n                              \"1\" = 30,\n                              \"2\" = 25,\n                              \"3\" = 22,\n                              \"4\" = 22,\n                              \"5\" = 22\n      )\n      \n      nodeShape[id] <- switch(V(g)$com[id], \n                              \"1\" = \"octagon\",\n                              \"2\" = \"pentagon\",\n                              \"3\" = \"triangle\",\n                              \"4\" = \"rectangle\",\n                              \"5\" = \"ellipse\"\n      )\n    }\n    \n    nodeData$color <- solidColor\n    nodeData$width <- nodeWidth\n    nodeData$height <- nodeWidth\n    nodeData$shape <- nodeShape\n    nodeData$x <- (plotSolution()$x)*600\n    nodeData$y <- -(plotSolution()$y)*800\n    #       nodeData$\"font-size\" <- rep(1, vcount(g))\n    \n    source <- V(g)[get.edgelist(g)[, 1]]$name\n    target <- V(g)[get.edgelist(g)[, 2]]$name\n    edgeData <- data.frame(source, target, stringsAsFactors=FALSE)\n    \n    names(edgeData) <- c(\"source\", \"target\")\n    #       browser()\n    network <- createCytoscapeJsNetwork(nodeData = nodeData,\n                                        edgeData = edgeData, \n                                        \n                                        #labelFontSize = rep(1, vcount(g)), \n                                        #nodeShape = nodeShape,\n                                        nodeLabelColor = \"grey\")\n    # browser()\n    return(network)\n  }\n  return(NULL)\n})\n\noutput$cytoscapePlot <- renderRcytoscapejs({\n  #     cyNetwork <- createCytoscapeJsNetwork(network()$nodes, network()$edges)\n  #     browser()\n  rcytoscapejs(nodeEntries = network()$nodes, \n               edgeEntries = network()$edges, \n               showPanzoom = T, \n               layout = \"preset\")\n})\n###########################################################\n\n  output$exportcsv <- downloadHandler(\n    filename = function() {\n      \"resultsTable.csv\"\n    }, \n    content = function(file) {\n      exportResults(format = \"csv\", \n                    file = file, \n                    object = createUser(), \n                    method = input$method, \n                    threshold = input$threshold,\n                    nlimit = input$nlimit, \n                    plimit = 15, \n                    data = FELLA.DATA)\n    }, \n    contentType = \"text/csv\"\n  )\n\n  output$exportigraph <- downloadHandler(\n    filename = function() {\n      \"resultsSubgraph.RData\"\n    }, \n    content = function(file) {\n      exportResults(format = \"igraph\", \n                    file = file, \n                    object = createUser(), \n                    method = input$method, \n                    threshold = input$threshold,\n                    nlimit = input$nlimit, \n                    plimit = 15, \n                    data = FELLA.DATA)\n    } \n#     , contentType = \"text/csv\"\n  )\n\n#   output$exportcsv = downloadHandler(\n#     filename = \"report.pdf\",\n#     \n#     content = function(file) {\n#       out = knit2pdf(\"report/sample.Rnw\")\n#       file.rename(out, file) # move pdf to file for downloading\n#     },\n#     \n#     contentType = \"application/pdf\"\n#   )  \n  \n  output$report = downloadHandler(\n    filename = \"report.pdf\",\n    \n    content = function(file) {\n      out = knit2pdf(\"report/sample.Rnw\")\n      file.rename(out, file) # move pdf to file for downloading\n    },\n    \n    contentType = \"application/pdf\"\n  )\n  \n  output$reportPR = downloadHandler(\n    filename = \"reportPR.pdf\",\n    \n    content = function(file) {\n      out = knit2pdf(\"report/samplePR.Rnw\")\n      file.rename(out, file) # move pdf to file for downloading\n    },\n    \n    contentType = \"application/pdf\"\n  )\n\n})",
    "created" : 1431349876115.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4279895988",
    "id" : "4A833FFD",
    "lastKnownWriteTime" : 1441620390,
    "path" : "~/Rstuffbro/SHELLA/server.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}