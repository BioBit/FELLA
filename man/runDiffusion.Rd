% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runDiffusion.R
\name{runDiffusion}
\alias{runDiffusion}
\title{Pathway enrichment through heat diffusion}
\usage{
runDiffusion(object = NULL, data = NULL, approx = "normality",
    t.df = 10, niter = 1000)
}
\arguments{
\item{object}{FELLA.USER object}

\item{data}{FELLA.DATA object}

\item{approx}{Character: "simulation" for Monte Carlo, "normality", 
"gamma" or "t" for parametric approaches}

\item{t.df}{Numeric value; number of degrees of freedom 
of the t distribution 
if the approximation \code{approx = "t"} is used}

\item{niter}{Number of iterations (permutations) 
for Monte Carlo ("simulation"), 
must be a numeric value between 1e2 and 1e5}
}
\value{
The \code{\link[FELLA]{FELLA.USER}} object 
with the diffusion enrichment results
}
\description{
Function \code{runDiffusion} performs 
the diffusion-based enrichment on a 
\code{\link[FELLA]{FELLA.USER}} object. 
If a custom background was specified, 
it will be used.

This function gives statistically normalised diffusion scores
for each node and allows 
the extraction of a subgraph according to a fixed threshold.
The p-scores are in the range [0,1], where lower scores are better, and 
can be computed using two kinds of approximations: 
the stochastic Monte Carlo trials (\code{"simulation"}) and the parametric 
scores (\code{"normality"}, \code{"gamma"}, \code{"t"}). 
Using \code{"simulation"} will perform random resampling of the 
input and will compute a score between 0 and 1 based on an empirical 
p-value calculation. 
On the other hand, the parametric approaches use the theoretical
first and second order statistics of the permuted distributions to 
normalise the scores. In particular, \code{"normality"} computes a 
z-score and maps to the [0,1] scale through \code{\link[stats]{pnorm}}. 
\code{"t"} does the same but using \code{\link[stats]{pt}} instead.
\code{"gamma"} uses the mean and variance to define the shape 
(E^2/V) and scale (V/E) of the gamma distribution, and 
\code{\link[stats]{pgamma}} to map to [0,1].
}
\examples{
data(FELLA.sample)
## Load a list of compounds to enrich
data(input.sample)
obj.empty <- defineCompounds(
compounds = input.sample, 
data = FELLA.sample)
obj.diff <- runDiffusion(
object = obj.empty, 
approx = "normality", 
data = FELLA.sample)
obj.diff

## Note that the enrich wrapper can do this in a compact way
obj.diff <- enrich(
compounds = input.sample, 
method = "diffusion", 
data = FELLA.sample)
obj.diff

}
