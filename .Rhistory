rowSums>0
all(rowSums>0)
expect_gt(rowSums, 0)
expect_gte(rowSums, 0)
expect_true(all(rowSums > 0))
test_that("getSums extractor", {
for (method in c("diffusion", "pagerank")) {
for (squared in c(T, F)) {
sums <- FELLA:::getSums(data = FELLA.sample,
type = "diffusion",
squared = F)
expect_named(sums)
expect_is(sums, "numeric")
expect_gt(length(sums), 0)
expect_true(all(sums > 0))
}
}
})
?getUsed
getUsed(FELLA.test, 1)
getUsed(FELLA.test, "diffusion")
getUsed(FELLA.test, "pagerank")
getValid(FELLA.test, "pagerank")
?getValid
getValid(FELLA.test, "diffusion")
is
is(FELLA.sample, "FELLA.data")
is(FELLA.sample, "FELLA.DATA")
context("FELLA.USER creation from compounds in lists")
# Load data to test
# test.env <- new.env(parent = environment())
test.env <- environment()
data("FELLA.sample", package = "FELLA", envir = test.env)
data("input.sample", package = "FELLA", envir = test.env)
test_that("getCom extractor", {
background.sample <- try(FELLA:::getCom(FELLA.sample, 5))
expect_is(background.sample, "character")
})
test_that("All compounds map, personalised background", {
FELLA.test <- try(defineCompounds(compounds = input.sample,
compoundsBackground = background.sample,
data = FELLA.sample))
expect_s4_class(FELLA.test, "FELLA.USER")
expect_equivalent(getInput(object = FELLA.test),
input.sample)
expect_equivalent(getBackground(object = FELLA.test),
background.sample)
expect_length(getExcluded(object = FELLA.test),
0)
})
test_that("All compounds map, no background", {
expect_message(FELLA.test <- try(defineCompounds(compounds = input.sample,
compoundsBackground = NULL,
data = FELLA.sample)),
"No background compounds specified")
expect_s4_class(FELLA.test, "FELLA.USER")
expect_equivalent(getInput(object = FELLA.test),
input.sample)
expect_length(getBackground(object = FELLA.test),
0)
expect_length(getExcluded(object = FELLA.test),
0)
})
test_that("Not all compounds map, no background", {
intruder.sample <- paste0("intruder", 1:10)
expect_warning(FELLA.test <- try(defineCompounds(compounds = c(input.sample, intruder.sample),
compoundsBackground = NULL,
data = FELLA.sample)),
"excluded")
expect_s4_class(FELLA.test, "FELLA.USER")
expect_equivalent(sort(getInput(object = FELLA.test)),
sort(input.sample))
expect_length(getBackground(object = FELLA.test),
0)
expect_equivalent(sort(getExcluded(object = FELLA.test)),
sort(intruder.sample))
})
test_that("Not all compounds map, background with mapping issues too", {
intruder1.sample <- paste0("intruder", 1:5)
intruder2.sample <- paste0("intruder", 1:10)
expect_warning(FELLA.test <- try(defineCompounds(compounds = c(input.sample, intruder1.sample),
compoundsBackground = c(background.sample, intruder2.sample),
data = FELLA.sample)),
"excluded")
expect_s4_class(FELLA.test, "FELLA.USER")
expect_equivalent(sort(getInput(object = FELLA.test)),
sort(input.sample))
expect_equivalent(sort(getBackground(object = FELLA.test)),
sort(background.sample))
expect_equivalent(sort(getExcluded(object = FELLA.test)),
sort(intruder1.sample))
})
library(testtht)
library(testthat)
context("FELLA.USER creation from compounds in lists")
# Load data to test
# test.env <- new.env(parent = environment())
test.env <- environment()
data("FELLA.sample", package = "FELLA", envir = test.env)
data("input.sample", package = "FELLA", envir = test.env)
test_that("getCom extractor", {
background.sample <- try(FELLA:::getCom(FELLA.sample, 5))
expect_is(background.sample, "character")
})
test_that("All compounds map, personalised background", {
FELLA.test <- try(defineCompounds(compounds = input.sample,
compoundsBackground = background.sample,
data = FELLA.sample))
expect_s4_class(FELLA.test, "FELLA.USER")
expect_equivalent(getInput(object = FELLA.test),
input.sample)
expect_equivalent(getBackground(object = FELLA.test),
background.sample)
expect_length(getExcluded(object = FELLA.test),
0)
})
test_that("All compounds map, no background", {
expect_message(FELLA.test <- try(defineCompounds(compounds = input.sample,
compoundsBackground = NULL,
data = FELLA.sample)),
"No background compounds specified")
expect_s4_class(FELLA.test, "FELLA.USER")
expect_equivalent(getInput(object = FELLA.test),
input.sample)
expect_length(getBackground(object = FELLA.test),
0)
expect_length(getExcluded(object = FELLA.test),
0)
})
test_that("Not all compounds map, no background", {
intruder.sample <- paste0("intruder", 1:10)
expect_warning(FELLA.test <- try(defineCompounds(compounds = c(input.sample, intruder.sample),
compoundsBackground = NULL,
data = FELLA.sample)),
"excluded")
expect_s4_class(FELLA.test, "FELLA.USER")
expect_equivalent(sort(getInput(object = FELLA.test)),
sort(input.sample))
expect_length(getBackground(object = FELLA.test),
0)
expect_equivalent(sort(getExcluded(object = FELLA.test)),
sort(intruder.sample))
})
test_that("Not all compounds map, background with mapping issues too", {
intruder1.sample <- paste0("intruder", 1:5)
intruder2.sample <- paste0("intruder", 1:10)
expect_warning(FELLA.test <- try(defineCompounds(compounds = c(input.sample, intruder1.sample),
compoundsBackground = c(background.sample, intruder2.sample),
data = FELLA.sample)),
"excluded")
expect_s4_class(FELLA.test, "FELLA.USER")
expect_equivalent(sort(getInput(object = FELLA.test)),
sort(input.sample))
expect_equivalent(sort(getBackground(object = FELLA.test)),
sort(background.sample))
expect_equivalent(sort(getExcluded(object = FELLA.test)),
sort(intruder1.sample))
})
library(testthat)
source('~/FELLA/FELLA/tests/testthat/felladataCreation.R', echo=TRUE)
background.sample
test_that("All compounds map, personalised background", {
FELLA.test <- try(defineCompounds(compounds = input.sample,
compoundsBackground = background.sample,
data = FELLA.sample))
expect_s4_class(FELLA.test, "FELLA.USER")
expect_equivalent(getInput(object = FELLA.test),
input.sample)
expect_equivalent(getBackground(object = FELLA.test),
background.sample)
expect_length(getExcluded(object = FELLA.test),
0)
})
background.sample
test.env
context("FELLA.USER creation from compounds in lists")
# Load data to test
# test.env <- new.env(parent = environment())
test.env <- environment()
data("FELLA.sample", package = "FELLA", envir = test.env)
data("input.sample", package = "FELLA", envir = test.env)
background.sample <- try(FELLA:::getCom(FELLA.sample, 5))
test_that("All compounds map, personalised background", {
FELLA.test <- try(defineCompounds(compounds = input.sample,
compoundsBackground = background.sample,
data = FELLA.sample))
expect_s4_class(FELLA.test, "FELLA.USER")
expect_equivalent(getInput(object = FELLA.test),
input.sample)
expect_equivalent(getBackground(object = FELLA.test),
background.sample)
expect_length(getExcluded(object = FELLA.test),
0)
})
test_that("All compounds map, no background", {
expect_message(FELLA.test <- try(defineCompounds(compounds = input.sample,
compoundsBackground = NULL,
data = FELLA.sample)),
"No background compounds specified")
expect_s4_class(FELLA.test, "FELLA.USER")
expect_equivalent(getInput(object = FELLA.test),
input.sample)
expect_length(getBackground(object = FELLA.test),
0)
expect_length(getExcluded(object = FELLA.test),
0)
})
source('~/FELLA/FELLA/tests/testthat/felladataCreation.R', echo=TRUE)
source('~/FELLA/FELLA/tests/testthat/felladataCreation.R', echo=TRUE)
source('~/FELLA/FELLA/tests/testthat/felladataCreation.R', echo=TRUE)
source('~/FELLA/FELLA/tests/testthat/felladataCreation.R', echo=TRUE)
test_package("FELLA")
install()
test_package("FELLA")
test_package("FELLA")
test_package("FELLA")
test()
test()
test()
FELLA.test <- try(defineCompounds(compounds = input.sample,
compoundsBackground = NULL,
data = FELLA.sample))
test_that("Enrichment wrapper", {
for (method in c("hypergeom", "diffusion", "pagerank")) {
for (approx in c("normality", "simulation", "t", "gamma")) {
FELLA.test <- enrich(compounds = input.sample,
method = method,
approx = approx,
niter = 100,
data = FELLA.sample)
expect_s4_class(FELLA.test, "FELLA.USER")
}
}
})
0:1 & 1:1
0:1 && 1:1
test_that("Enrichment wrapper", {
for (method in c("hypergeom", "diffusion", "pagerank")) {
for (approx in c("normality", "simulation", "t", "gamma")) {
FELLA.test <- enrich(compounds = input.sample,
method = method,
approx = approx,
niter = 100,
data = FELLA.sample)
expect_s4_class(FELLA.test, "FELLA.USER")
pval <- getPvalues(FELLA.test, method)
expect_named(pval)
expect_is(pval, "numeric")
expect_gt(length(pval), 0)
expect_true(all(pval >= 0 & pval <= 1))
}
}
})
test()
nnodes <- try(vcount(getGraph(FELLA.sample)))
nnodes <- try(igraph::vcount(getGraph(FELLA.sample)))
nnodes
test_that("Enrichment wrapper", {
nnodes <- try(igraph::vcount(getGraph(FELLA.sample)))
for (method in c("hypergeom", "diffusion", "pagerank")) {
for (approx in c("normality", "simulation", "t", "gamma")) {
FELLA.test <- enrich(compounds = input.sample,
method = method,
approx = approx,
niter = 100,
data = FELLA.sample)
expect_s4_class(FELLA.test, "FELLA.USER")
pval <- getPvalues(FELLA.test, method)
expect_named(pval)
expect_is(pval, "numeric")
expect_length(pval, nnodes)
expect_true(all(pval >= 0 & pval <= 1))
}
}
})
npaths <- length(getCom(FELLA.sample, "pathway"))
npaths
test_that("Enrichment wrapper", {
nnodes <- try(igraph::vcount(getGraph(FELLA.sample)))
npaths <- length(getCom(FELLA.sample, "pathway"))
for (method in c("hypergeom", "diffusion", "pagerank")) {
for (approx in c("normality", "simulation", "t", "gamma")) {
FELLA.test <- enrich(compounds = input.sample,
method = method,
approx = approx,
niter = 100,
data = FELLA.sample)
expect_s4_class(FELLA.test, "FELLA.USER")
pval <- getPvalues(FELLA.test, method)
expect_named(pval)
expect_is(pval, "numeric")
if (method == "hypergeom") {
expect_length(pval, npaths)
} else {
expect_length(pval, nnodes)
}
expect_true(all(pval >= 0 & pval <= 1))
}
}
})
test()
use_vignette("overview")
install()
summary(FELLA.sample)
str(FELLA.sample)
class(FELLA.sample)
getCom(FELLA.sample, "pathway")
data("input.sample")
input.full <- c(input.sample, paste0("intruder", 1:10))
input.full
myAnalysis <- defineCompounds(compounds = input.full,
data = FELLA.sample)
getInput(myAnalysis)
getValid(myAnalysis)
FELLA:::getValid(myAnalysis)
FELLA:::getValid(myAnalysis, "diffusion")
1. Hypergeometric test (`method = "diffusion": it performs the metabolite-sampling hypergeometric test using the connections in `FELLA`'s KEGG graph. This is included for completeness and does not include the contextual novelty of the diffusive methods.
myAnalysis <- enrich(compounds = input.full, method = "all", approx = "normality", data = FELLA.sample)
summary(new("FELLA.USER"))
summary(new("FELLA.USER"))
new("FELLA.USER")
install()
summary(new("FELLA.USER"))
myAnalysis <- enrich(compounds = input.full,
method = "diffusion",
approx = "normality",
data = FELLA.sample)
summary(new("FELLA.USER"))
summary(myAnalysis)
install()
summary(myAnalysis)
install()
summary(myAnalysis)
install()
summary(myAnalysis)
show(myAnalysis)
myAnalysis <- enrich(compounds = input.full,
method = "all",
approx = "normality",
data = FELLA.sample)
show(myAnalysis)
signif
install()
show(myAnalysis)
cat(1,2,3)
install()
show(myAnalysis)
defineCompounds(compounds = "a", data = "FELLA.sample")
defineCompounds(compounds = "a", data = FELLA.sample)
input.fail <- paste0(" ", input.full)
defineCompounds(compounds = input.fail,
data = FELLA.sample)
install.packages("markdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
version(rmarkdown)
version("rmarkdown")
runDiffusion(object = myAnalysis
approx = "normality",
data = FELLA.sample)
runDiffusion(object = myAnalysis,
approx = "normality",
data = FELLA.sample)
runDiffusion(object = myAnalysis,
approx = "normality",
data = FELLA.sample)
myAnalysis_bis <- runDiffusion(object = myAnalysis,
approx = "normality",
data = FELLA.sample)
myAnalysis_bis <- runDiffusion(object = myAnalysis,
approx = "normality",
p.adjust = "fdr",
data = FELLA.sample)
show(myAnalysis_bis)
FELLA::plot
?FELLA::plot
?"FELLA.USER-class"
FELLA::plot(x = myAnalysis, method = "diffusion", main = "My first enrichment", threshold = 0.1, data = FELLA.sample)
FELLA::plot(x = myAnalysis,
method = "hypergeom",
main = "My first enrichment",
threshold = 0.1,
data = FELLA.sample)
FELLA::plot(x = myAnalysis,
method = "hypergeom",
main = "My first enrichment",
threshold = 1,
data = FELLA.sample)
FELLA::plot(x = myAnalysis,
method = "hypergeom",
main = "My first enrichment",
threshold = 1-1e-10,
data = FELLA.sample)
eps
eps <- 1e-10
FELLA::plot(x = myAnalysis,
method = "hypergeom",
main = "My first enrichment",
threshold = 1 - eps,
data = FELLA.sample)
FELLA::plot(x = myAnalysis,
method = "hypergeom",
main = "My first enrichment",
threshold = 1,
data = FELLA.sample)
install()
devtools::install()
FELLA::plot(x = myAnalysis,
method = "hypergeom",
main = "My first enrichment",
threshold = 1,
data = FELLA.sample)
FELLA::plot(x = myAnalysis,
method = "pagerank",
main = "My first enrichment",
threshold = 0.1,
data = FELLA.sample)
generateResultsTable(object = myAnalysis,
method = "pagerank",
main = "My first enrichment using the PageRank analysis in FELLA",
threshold = 0.1,
data = FELLA.sample)
generateResultsTable(object = myAnalysis,
method = "pagerank",
threshold = 0.1,
data = FELLA.sample)
myTable <- generateResultsTable(object = myAnalysis,
method = "diffusion",
threshold = 0.1,
data = FELLA.sample)
knitr::kable(myTable)
myGraph <- generateResultsGraph(object = myAnalysis,
method = "diffusion",
threshold = 0.1,
data = FELLA.sample)
show(myGraph)
class(myTable)
myTempDir <- tempdir()
myTempDir
myExp_csv <- paste0(myTempDir, "/table.csv")
myExp_csv
exportResults(format = "csv", file = myExp_csv, method = "PageRank", threshold = 0.1, object = myAnalysis, data = FELLA.sample)
test <- read.csv(myExp_csv)
test <- read.csv(file = myExp_csv)
myExp_csv
list.files(tempdir())
myAnalysis
FELLA.sample
exportResults(format = "csv",
file = myExp_csv,
method = "PageRank",
threshold = 0.1,
object = myAnalysis,
data = FELLA.sample)
?exportResults
exportResults(format = "csv",
file = myExp_csv,
method = "pagerank",
threshold = 0.1,
object = myAnalysis,
data = FELLA.sample)
exportResults(format = "csv",
file = myExp_csv,
method = "pagerank",
threshold = 0.1,
object = myAnalysis,
data = FELLA.sample)
test <- read.csv(file = myExp_csv)
test
knitr::kable(head(test))
?exportResults
myExp_graph <- paste0(myTempDir, "/graph.RData")
exportResults(format = "igraph",
file = myExp_graph,
method = "pagerank",
threshold = 0.1,
object = myAnalysis,
data = FELLA.sample)
list.files(tempdir())
myExp_plotpng <- paste0(myTempDir, "/graph.png")
exportResults(format = "png",
file = myExp_plotpng,
method = "pagerank",
threshold = 0.1,
object = myAnalysis,
data = FELLA.sample)
stopifnot("graph.RData" %in% list.files(myTempDir))
stopifnot("graph.png" %in% list.files(myTempDir))
list.files(tempdir())
myExp_plotpng <- paste0(myTempDir, "/graph.png")
exportResults(format = "png",
file = myExp_plotpng,
method = "pagerank",
threshold = 0.1,
object = myAnalysis,
data = FELLA.sample)
stopifnot("graph.png" %in% list.files(myTempDir))
library(igraph)
write.graph
?write.graph
myExp_pajek <- paste0(myTempDir, "/graph.pajek")
exportResults(format = "pajek",
file = myExp_plotpng,
method = "diffusion",
threshold = 0.1,
object = myAnalysis,
data = FELLA.sample)
stopifnot("graph.pajek" %in% list.files(myTempDir))
list.files(myTempDir)
write.graph(myGraph, format = "pajek", file = myExp_pajek)
list.files(myTempDir)
stopifnot("graph.pajek" %in% list.files(myTempDir))
